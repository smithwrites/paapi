---
name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy-staging:
    name: Deploy to staging
    runs-on: ubuntu-latest
    environment: staging

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create an image tag based on the commit sha
      id: image_tag
      run: |
        echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup docker cache
      id: cache
      uses: actions/cache@v1
      with:
        path: docker-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Load docker cache
      run: |
        if [ -d "docker-cache" ]; then
          cat docker-cache/x* > paapi.tar
          docker load < paapi.tar
          rm -rf docker-cache
        fi

    - name: Build, tag, and push staging image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: paapi/staging
        IMAGE_TAG: ${{ steps.image_tag.outputs.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t paapi:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker save paapi:$IMAGE_TAG $(docker history -q paapi:$IMAGE_TAG | awk '!/<missing>/{print}') >paapi.tar
        mkdir docker-cache
        split -b 5G paapi.tar docker-cache/x
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download task definition for web and strip unused properties
      run: |
        aws ecs describe-task-definition --task-definition paapi-db-migrate-staging --query taskDefinition | \
        jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > db_migrate.json

    - name: Generate task definition for db_migrate
      id: task-def-db_migrate
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: db_migrate.json
        container-name: paapi
        image: ${{ steps.build-image.outputs.image }}

    - name: Download task definition for web and strip unused properties
      run: |
        aws ecs describe-task-definition --task-definition paapi-web-staging --query taskDefinition | \
        jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > web.json

    - name: Generate task definition for web
      id: task-def-web
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: web.json
        container-name: paapi
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy db_migrate
      env:
        CLUSTER: paapi-staging
        TASK_DEFINITION: paapi-db-migrate-staging
        PAAPI_SUBNETS: subnet-${{ secrets.PAAPI_SUBNETS }}
        PAAPI_SG: sg-${{ secrets.PAAPI_SG }}
      run: |
        aws ecs run-task --cluster $CLUSTER \
          --task-definition $TASK_DEFINITION --launch-type FARGATE \
          --network-configuration '{"awsvpcConfiguration": {"subnets": ["'$PAAPI_SUBNETS'"],"securityGroups": ["'$PAAPI_SG'"],"assignPublicIp": "ENABLED"}}'

    - name: Deploy web
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-web.outputs.task-definition }}
        service: paapi-web-staging
        cluster: paapi-staging
        wait-for-service-stability: true
        codedeploy-appspec: .aws/appspec.yml
        codedeploy-application: paapi-staging
        codedeploy-deployment-group: default

  deploy-prod:
    name: Deploy to production
    runs-on: ubuntu-latest
    environment: production
    needs: deploy-staging

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Create an image tag based on the commit sha
      id: image_tag
      run: |
        echo "::set-output name=sha::$(echo ${GITHUB_SHA} | cut -c1-7)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup docker cache
      id: cache
      uses: actions/cache@v1
      with:
        path: docker-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Load docker cache
      run: |
        if [ -d "docker-cache" ]; then
          cat docker-cache/x* > paapi.tar
          docker load < paapi.tar
          rm -rf docker-cache
        fi

    - name: Build, tag, and push production image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: paapi/production
        IMAGE_TAG: ${{ steps.image_tag.outputs.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t paapi:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker save paapi:$IMAGE_TAG $(docker history -q paapi:$IMAGE_TAG | awk '!/<missing>/{print}') >paapi.tar
        mkdir docker-cache
        split -b 5G paapi.tar docker-cache/x
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download task definition for web and strip unused properties
      run: |
        aws ecs describe-task-definition --task-definition paapi-db-migrate-production --query taskDefinition | \
        jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > db_migrate.json

    - name: Generate task definition for db_migrate
      id: task-def-db_migrate
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: db_migrate.json
        container-name: paapi
        image: ${{ steps.build-image.outputs.image }}

    - name: Download task definition for web and strip unused properties
      run: |
        aws ecs describe-task-definition --task-definition paapi-web-production --query taskDefinition | \
        jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > web.json

    - name: Generate task definition for web
      id: task-def-web
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: web.json
        container-name: paapi
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy db_migrate
      env:
        CLUSTER: paapi-production
        TASK_DEFINITION: paapi-db-migrate-production
        PAAPI_SUBNETS: subnet-${{ secrets.PAAPI_SUBNETS }}
        PAAPI_SG: sg-${{ secrets.PAAPI_SG }}
      run: |
        aws ecs run-task --cluster $CLUSTER \
          --task-definition $TASK_DEFINITION --launch-type FARGATE \
          --network-configuration '{"awsvpcConfiguration": {"subnets": ["'$PAAPI_SUBNETS'"],"securityGroups": ["'$PAAPI_SG'"],"assignPublicIp": "ENABLED"}}'

    - name: Deploy web
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-web.outputs.task-definition }}
        service: paapi-web-production
        cluster: paapi-production
        wait-for-service-stability: true
        codedeploy-appspec: .aws/appspec.yml
        codedeploy-application: paapi-production
        codedeploy-deployment-group: default
